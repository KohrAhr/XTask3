namespace Singleton
{
    public class ControlClass
    {
        // Приватное поле для хранения единственного экземпляра класса
        private static ControlClass instance;
        private IResult result;

        // Приватный конструктор, чтобы предотвратить создание экземпляров извне
        private ControlClass(IResult aResult)
        {
            result = aResult;
        }

        // Публичный метод для получения (и, при необходимости, создания) единственного экземпляра
        // передача интерфейсов в конструктор для снижения зависимости это приём называется "внедрение зависимостей" (Dependency Injection).
        // Внедрение зависимостей - это процесс передачи объектов, на которых зависит класс, через его конструктор(или метод), вместо того, чтобы создавать эти зависимости внутри класса.

        // В данном случае, внедрение зависимостей происходит через конструктор private ControlClass(IResult aResult), где IResult представляет зависимость класса ControlClass.
        // Этот подход позволяет классу ControlClass использовать любую реализацию ILogger, что делает его более гибким и уменьшает связность с конкретными реализациями подачи результата.

        // Внедрение зависимостей способствует созданию более тестируемого и поддерживаемого кода, так как вы можете легко заменять зависимости мок-объектами для тестирования и изменять поведение класса, не внося изменения в его исходный код.
        // Это один из ключевых принципов инверсии управления (IoC) и практики инъекции зависимостей в объекты (DI).
        public static ControlClass GetInstance(IResult aResult)
        {
            // Если экземпляр еще не создан, создаем его
            if (instance == null)
            {
                instance = new ControlClass(aResult);
            }
            return instance;
        }

        // Другие методы и свойства класса
        public void FunctionXXX()
        {
            result.WriteLine("1000A!");
        }
    }
}
